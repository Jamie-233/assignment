import * as constants from './constants';
import { fromJS } from 'immutable';

const defaultState = fromJS({
  focused: false,
  visible: false,
  filter: '',
  list: [],
  beforeList: [],
  max: Math.max(101.05, 101.39, 133.69, 134.05, 137.7, 138.31, 143.19, 143.88, 145.02, 145.26, 145.33, 147.13, 148.85, 150.57, 155.09, 155.59, 158.4, 159.71, 160.61, 161.92, 162.79, 163.01, 163.09, 163.17, 164.34, 165.45, 166.06, 166.51, 167.61, 169.17, 170.0, 170.36, 170.85, 170.85, 171.85, 172.5, 172.77, 173.47, 173.53, 173.57, 173.87, 174.33, 174.41, 175.06, 175.16, 176.51, 176.52, 176.64, 177.67, 178.07, 178.63, 178.7, 178.93, 179.67, 179.88, 180.28, 180.31, 180.36, 180.45, 180.57, 181.14, 181.18, 182.23, 183.07, 183.23, 183.26, 183.32, 183.36, 183.59, 185.03, 185.32, 185.84, 186.46, 186.56, 186.7, 186.87, 187.1, 187.31, 187.33, 187.44, 188.77, 189.28, 189.59, 189.65, 189.75, 189.82, 189.88, 190.23, 190.69, 191.68, 192.18, 192.18, 193.55, 193.8, 194.32, 194.4, 194.41, 194.55, 194.69, 194.71, 194.82, 194.89, 195.09, 195.2, 195.39, 195.53, 195.62, 195.91, 196.04, 196.37, 196.71, 197.09, 197.83, 198.31, 198.53, 199.11, 199.15, 199.54, 199.91, 200.15, 200.23, 200.8, 201.4, 201.64, 202.67, 202.9, 203.76, 203.82, 203.9, 204.01, 204.11, 204.23, 204.3, 204.49, 204.86, 205.09, 205.14, 206.81, 207.37, 208.35, 208.64, 208.67, 208.78, 208.8, 208.86, 208.94, 209.64, 209.8, 209.84, 209.93, 210.45, 210.56, 210.59, 210.91, 210.99, 212.2, 212.44, 212.61, 214.56, 214.88, 215.21, 215.62, 215.8, 215.88, 216.12, 216.16, 216.71, 216.9, 217.15, 218.1, 218.15, 218.27, 219.02, 219.07, 219.73, 219.81, 219.99, 220.06, 220.06, 220.49, 222.56, 222.66, 222.73, 223.15, 223.8, 224.03, 224.06, 224.42, 224.77, 225.04, 225.04, 225.35, 225.37, 227.68, 227.74, 227.84, 228.06, 229.18, 229.32, 229.77, 230.05, 230.29, 230.34, 230.48, 230.9, 230.9, 231.11, 232.67, 232.97, 234.41, 235.16, 235.83, 236.61, 236.7, 237.0, 237.62, 237.68, 238.08, 238.11, 238.21, 238.48, 238.64, 238.82, 239.06, 239.07, 240.1, 241.58, 241.74, 241.81, 243.0, 243.02, 243.95, 244.39, 245.01, 245.11, 245.32, 245.32, 245.53, 245.58, 246.05, 246.4, 247.04, 247.11, 247.6, 248.07, 248.11, 248.19, 248.39, 248.55, 248.71, 249.1, 250.34, 250.52, 251.26, 251.53, 252.35, 252.68, 254.3, 255.31, 255.59, 255.64, 255.75, 255.92, 256.12, 256.37, 256.53, 257.28, 257.52, 257.66, 258.39, 258.94, 259.0, 259.99, 261.02, 262.33, 263.01, 264.43, 264.64, 265.99, 266.51, 270.02, 270.09, 270.47, 273.88, 275.5, 277.76, 279.73, 282.24, 283.58, 283.65, 284.3, 286.8, 292.83, 294.34, 301.26, 324.07, 336.63, 341.26, 349.15, 681.67),
  chartData: [101.05, 101.39, 133.69, 134.05, 137.7, 138.31, 143.19, 143.88, 145.02, 145.26, 145.33, 147.13, 148.85, 150.57, 155.09, 155.59, 158.4, 159.71, 160.61, 161.92, 162.79, 163.01, 163.09, 163.17, 164.34, 165.45, 166.06, 166.51, 167.61, 169.17, 170.0, 170.36, 170.85, 170.85, 171.85, 172.5, 172.77, 173.47, 173.53, 173.57, 173.87, 174.33, 174.41, 175.06, 175.16, 176.51, 176.52, 176.64, 177.67, 178.07, 178.63, 178.7, 178.93, 179.67, 179.88, 180.28, 180.31, 180.36, 180.45, 180.57, 181.14, 181.18, 182.23, 183.07, 183.23, 183.26, 183.32, 183.36, 183.59, 185.03, 185.32, 185.84, 186.46, 186.56, 186.7, 186.87, 187.1, 187.31, 187.33, 187.44, 188.77, 189.28, 189.59, 189.65, 189.75, 189.82, 189.88, 190.23, 190.69, 191.68, 192.18, 192.18, 193.55, 193.8, 194.32, 194.4, 194.41, 194.55, 194.69, 194.71, 194.82, 194.89, 195.09, 195.2, 195.39, 195.53, 195.62, 195.91, 196.04, 196.37, 196.71, 197.09, 197.83, 198.31, 198.53, 199.11, 199.15, 199.54, 199.91, 200.15, 200.23, 200.8, 201.4, 201.64, 202.67, 202.9, 203.76, 203.82, 203.9, 204.01, 204.11, 204.23, 204.3, 204.49, 204.86, 205.09, 205.14, 206.81, 207.37, 208.35, 208.64, 208.67, 208.78, 208.8, 208.86, 208.94, 209.64, 209.8, 209.84, 209.93, 210.45, 210.56, 210.59, 210.91, 210.99, 212.2, 212.44, 212.61, 214.56, 214.88, 215.21, 215.62, 215.8, 215.88, 216.12, 216.16, 216.71, 216.9, 217.15, 218.1, 218.15, 218.27, 219.02, 219.07, 219.73, 219.81, 219.99, 220.06, 220.06, 220.49, 222.56, 222.66, 222.73, 223.15, 223.8, 224.03, 224.06, 224.42, 224.77, 225.04, 225.04, 225.35, 225.37, 227.68, 227.74, 227.84, 228.06, 229.18, 229.32, 229.77, 230.05, 230.29, 230.34, 230.48, 230.9, 230.9, 231.11, 232.67, 232.97, 234.41, 235.16, 235.83, 236.61, 236.7, 237.0, 237.62, 237.68, 238.08, 238.11, 238.21, 238.48, 238.64, 238.82, 239.06, 239.07, 240.1, 241.58, 241.74, 241.81, 243.0, 243.02, 243.95, 244.39, 245.01, 245.11, 245.32, 245.32, 245.53, 245.58, 246.05, 246.4, 247.04, 247.11, 247.6, 248.07, 248.11, 248.19, 248.39, 248.55, 248.71, 249.1, 250.34, 250.52, 251.26, 251.53, 252.35, 252.68, 254.3, 255.31, 255.59, 255.64, 255.75, 255.92, 256.12, 256.37, 256.53, 257.28, 257.52, 257.66, 258.39, 258.94, 259.0, 259.99, 261.02, 262.33, 263.01, 264.43, 264.64, 265.99, 266.51, 270.02, 270.09, 270.47, 273.88, 275.5, 277.76, 279.73, 282.24, 283.58, 283.65, 284.3, 286.8, 292.83, 294.34, 301.26, 324.07, 336.63, 341.26, 349.15, 681.67],
});

const filterResult = (item) => {
  return newState => newState.name.toLowerCase().indexOf(item) !== -1;
};

const handleSearch = (state, action) => {
  const newState = JSON.parse(JSON.stringify(state));
  if(!action.keyword) return state.set('list', state.getIn(['beforeList', 'list']));
  const result = state.get('list').toJS().filter(filterResult(action.keyword));
  if(!result.length) return state;
  return state.set('list', fromJS(result)).set('beforeList', fromJS(newState));
};

export default function Reducer(state=defaultState, action) {
  switch (action.type) {
    case constants.SEARCH_FOCUS:
      return state.set('focused', true);
    case constants.SEARCH_BLUR:
      return state.set('focused', false);
    case constants.CHANGE_LIST:
      return state.set('list', fromJS(action.list));
    case constants.SHOW_MODAL:
      return state.set('visible', true);
    case constants.HANDLE_SUBMIT:
      return state.set('visible', false).set('list', state.get('list').concat(action.list));
    case constants.HANDLE_DELETE:
      return state.set('list', state.get('list').splice(action.item, 1));
    case constants.HANDLE_CANCEL:
      return state.set('visible', false);
    case constants.HANDLE_SEARCH:
      return handleSearch(state, action);
    case constants.HANDLE_CHART:
      return state.set('chartData', action.chartData);
    case constants.CREATE_RANDOM:
      const maxNumber = Math.max(...state.get('chartData').toJS());
      const datas = state.get('chartData').toJS();
      const randomData = datas.map(itme => itme *= 2);
      return state.merge({
        chartData: fromJS(randomData),
        max: maxNumber
      })
    default:
      return state;
  }
}
